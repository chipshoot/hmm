// <auto-generated />
using System;
using Hmm.IDP.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hmm.IDP.Migrations.IdentityDb
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20200916030517_IdentityDbContxt")]
    partial class IdentityDbContxt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Hmm.IDP.Entities.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SecurityCode")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Email = "fchy@yahoo.com",
                            IsActive = true,
                            Password = "AQAAAAEAACcQAAAAEG/4LGAH+5+zQRO3cPWA/um+2U/BiFudtLhUi29npPzYa1wCdbfOBb+WzoEwFlOMHg==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "6E8FDCED-8857-46B9-BAD8-6DF2540FD07E",
                            UserName = "fchy",
                            Version = "f37bea81-91fb-4b13-9b89-d0173fdb96e6"
                        },
                        new
                        {
                            Id = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Email = "ftt@yahoo.com",
                            IsActive = true,
                            Password = "AQAAAAEAACcQAAAAEG/4LGAH+5+zQRO3cPWA/um+2U/BiFudtLhUi29npPzYa1wCdbfOBb+WzoEwFlOMHg==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "1501CAB6-CA3F-470F-AE5E-1A0B970D1707",
                            UserName = "fzt",
                            Version = "90ae73ca-5157-4c45-9573-a589f155babd"
                        },
                        new
                        {
                            Id = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Email = "bsmith@gmail.com",
                            IsActive = true,
                            Password = "AQAAAAEAACcQAAAAEG/4LGAH+5+zQRO3cPWA/um+2U/BiFudtLhUi29npPzYa1wCdbfOBb+WzoEwFlOMHg==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "157BBC69-9989-4353-A4B9-02A205678562",
                            UserName = "bob",
                            Version = "36f77b12-04c4-4151-b0ba-44da88a986b5"
                        });
                });

            modelBuilder.Entity("Hmm.IDP.Entities.UserClaim", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 48, 119, 1, 202, 211, 115, 174, 76, 186, 33, 51, 38, 126, 167, 126, 173 },
                            Type = "name",
                            UserId = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Value = "Chaoyang Fang",
                            Version = "2cbb25ca-cde9-4190-825f-07c2024510f3"
                        },
                        new
                        {
                            Id = new byte[] { 101, 223, 52, 251, 112, 20, 189, 66, 154, 48, 18, 38, 172, 222, 54, 142 },
                            Type = "given_name",
                            UserId = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Value = "Chaoyang",
                            Version = "50c7d2dc-667b-4e5f-acf9-576d42465c4e"
                        },
                        new
                        {
                            Id = new byte[] { 219, 248, 128, 85, 72, 217, 79, 75, 183, 128, 55, 250, 179, 44, 21, 67 },
                            Type = "family_name",
                            UserId = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Value = "Fang",
                            Version = "9efa47eb-3ac8-4c54-8d56-e4f604acb6ec"
                        },
                        new
                        {
                            Id = new byte[] { 71, 195, 125, 204, 227, 255, 77, 70, 177, 62, 241, 212, 107, 173, 219, 89 },
                            Type = "email",
                            UserId = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Value = "fchy@yahoo.com",
                            Version = "e97b5905-b881-404a-bb98-9ada4c5bb3ba"
                        },
                        new
                        {
                            Id = new byte[] { 41, 45, 41, 253, 168, 158, 34, 78, 171, 171, 176, 194, 4, 83, 197, 179 },
                            Type = "address",
                            UserId = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Value = "1750 Bloor St.",
                            Version = "4d80861f-4f36-441b-a07f-2763d174e832"
                        },
                        new
                        {
                            Id = new byte[] { 13, 177, 108, 78, 44, 210, 153, 73, 170, 164, 143, 213, 144, 239, 145, 218 },
                            Type = "birthdate",
                            UserId = new byte[] { 244, 78, 229, 8, 76, 246, 43, 68, 189, 77, 99, 223, 101, 189, 251, 85 },
                            Value = "1967-03-13",
                            Version = "2125ab14-5982-4c19-95cc-7bb60ab0436e"
                        },
                        new
                        {
                            Id = new byte[] { 119, 122, 124, 174, 38, 172, 220, 70, 177, 184, 140, 199, 209, 131, 253, 200 },
                            Type = "name",
                            UserId = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Value = "Zhitao Fang",
                            Version = "53ea166c-6c77-4c9d-baa9-418b5cb05e12"
                        },
                        new
                        {
                            Id = new byte[] { 78, 229, 192, 246, 151, 173, 113, 64, 142, 10, 170, 39, 185, 91, 16, 154 },
                            Type = "given_name",
                            UserId = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Value = "Zhitao",
                            Version = "e37ec180-87b6-41d5-932c-e352e9bd5f56"
                        },
                        new
                        {
                            Id = new byte[] { 233, 101, 146, 76, 43, 113, 242, 67, 148, 174, 210, 13, 124, 46, 46, 139 },
                            Type = "family_name",
                            UserId = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Value = "Fang",
                            Version = "0115e83c-28f2-49a1-adb7-ebacf07461b9"
                        },
                        new
                        {
                            Id = new byte[] { 206, 64, 110, 177, 61, 252, 130, 77, 140, 234, 221, 219, 5, 126, 37, 122 },
                            Type = "email",
                            UserId = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Value = "ftt@yahoo.com",
                            Version = "1eacd436-7e6f-4e01-9b3b-f1d4bbc16a34"
                        },
                        new
                        {
                            Id = new byte[] { 158, 40, 17, 30, 58, 86, 247, 75, 138, 197, 96, 232, 90, 191, 42, 125 },
                            Type = "address",
                            UserId = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Value = "29 Spencer Ave.",
                            Version = "1b57ef04-00c5-4b02-9bff-8869f5310184"
                        },
                        new
                        {
                            Id = new byte[] { 128, 62, 248, 20, 42, 181, 194, 64, 135, 149, 220, 56, 4, 232, 174, 248 },
                            Type = "birthdate",
                            UserId = new byte[] { 16, 172, 60, 48, 198, 166, 70, 75, 132, 107, 170, 7, 168, 212, 99, 147 },
                            Value = "1999-09-30",
                            Version = "a8685044-3dec-4c38-8634-26df92c6eba2"
                        },
                        new
                        {
                            Id = new byte[] { 103, 35, 57, 127, 47, 160, 203, 76, 176, 138, 195, 235, 63, 43, 3, 101 },
                            Type = "name",
                            UserId = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Value = "Bob Smith",
                            Version = "eb433deb-73d0-4979-a2b9-a27662a4884c"
                        },
                        new
                        {
                            Id = new byte[] { 135, 248, 63, 211, 76, 128, 177, 79, 149, 50, 212, 159, 122, 191, 152, 56 },
                            Type = "given_name",
                            UserId = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Value = "Bob",
                            Version = "f14c4924-b918-426d-818d-2452720adc1b"
                        },
                        new
                        {
                            Id = new byte[] { 199, 230, 154, 243, 247, 159, 220, 64, 174, 167, 189, 6, 81, 67, 228, 124 },
                            Type = "family_name",
                            UserId = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Value = "Smith",
                            Version = "8538a826-9490-4f12-8cab-555767e829c1"
                        },
                        new
                        {
                            Id = new byte[] { 106, 239, 15, 105, 138, 133, 75, 69, 178, 148, 184, 5, 149, 182, 219, 14 },
                            Type = "email",
                            UserId = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Value = "bsmith@gmail.com",
                            Version = "871b3014-1297-4b3a-9166-4a367aabfa1c"
                        },
                        new
                        {
                            Id = new byte[] { 134, 213, 16, 97, 174, 74, 57, 68, 166, 179, 31, 200, 160, 79, 130, 194 },
                            Type = "address",
                            UserId = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Value = "3345 Cardross Rd.",
                            Version = "ed5311b8-b757-47de-ab2b-614e089bdb51"
                        },
                        new
                        {
                            Id = new byte[] { 184, 70, 107, 142, 235, 46, 0, 68, 173, 255, 143, 108, 48, 58, 84, 191 },
                            Type = "birthdate",
                            UserId = new byte[] { 50, 74, 213, 61, 143, 104, 251, 64, 159, 94, 102, 111, 240, 7, 179, 193 },
                            Value = "1987-02-23",
                            Version = "56ddf4a6-d0f1-4120-8c99-c01d3482e790"
                        });
                });

            modelBuilder.Entity("Hmm.IDP.Entities.UserClaim", b =>
                {
                    b.HasOne("Hmm.IDP.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
